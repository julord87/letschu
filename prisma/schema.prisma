generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Color {
  negro
  blanco
  rojo
  azul
  verde
  rosa
  amarillo
  gris
  naranja
  violeta
  bordo
  fucsia
  beige
  celeste
  arcoiris
  animal_print
  amarillo_fluo
  naranja_fluo
}

enum ShippingCompany {
  correo_argentino
  fedex
  dhl
  oca
  andreani
  ups
}

enum Role {
  admin
  user
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Type {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id               String           @id @default(uuid())
  title            String
  description      String
  price            Float            @default(0)
  colors           Color[]          @default([])
  shippingCompanies ShippingCompany[] @default([])
  slug             String           @unique
  tags             String[]         @default([])

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  type   Type   @relation(fields: [typeId], references: [id])
  typeId String

  ProductImage ProductImage[]

  OrderItem OrderItem[]
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  emailverified    DateTime?
  password         String
  role             Role      @default(user)
  image            String?
  resetToken       String?
  resetTokenExpiry DateTime?

  // Relations
  address UserAddress?
  orders  Order[]
}

model Country {
  id   String @id
  name String

  // Relations
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model ProvinceArg {
  id   String @id
  name String

  // Relations
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  address   String
  address2  String
  city      String
  zip       String
  phone     String

  // Relations
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  province   ProvinceArg @relation(fields: [provinceId], references: [id])
  provinceId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

// Orden de compras
model Order {
  id                    String    @id @default(uuid())
  itemsInOrder          Int
  subtotal              Float
  total                 Float
  isPaid                Boolean   @default(false)
  paidAt                DateTime?
  confirmationEmailSent Boolean   @default(false)
  shippingMethod        String    @default("showroom")
  shippingCost          Float     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  color    Color

  // Relations
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  address   String
  address2  String?
  zip       String
  city      String
  phone     String

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  province   ProvinceArg? @relation(fields: [provinceId], references: [id]) // <- Hacer opcional
  provinceId String?

  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}
